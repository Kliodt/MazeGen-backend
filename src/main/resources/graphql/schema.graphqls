type Query {
    getUserById(userId: Int!): User
    getMazeById(mazeId: Int!): Maze

    getMazesByUser(userId: Int!, pivotId: Int!, pageNum: Int!, pageSize: Int!): [Maze!]!
    getRecentMazes(pivotId: Int!, pageNum: Int!, pageSize: Int!): [Maze!]!
}

type Mutation {
    generateMaze(parameters: MazeGenerator!): GeneratorResult!

    saveMazePath(points: [[Int!]!]!, mazeId: Int): Boolean!
    submitMazeCompletion(points: [[Int!]!]!, mazeId: Int): MazePath
}

# -------------- scalar types --------------
scalar DateTime

# -------------- input types --------------

input MazeGenerator {
    width: Int!
    height: Int!
    algorithmKeyStr: String!
    startX: Int
    startY: Int
    finishX: Int
    finishY: Int
}

# -------------- output types --------------

type Maze {
    id: Int!
    grid: [[Int!]!]!
    startX: Int!
    startY: Int!
    finishX: Int!
    finishY: Int!

    author: User
    algorithm: String
    genDate: DateTime
    genDurationMs: Int

    # synthetic fields

    "Maze path for a user who made a request"
    userPath: MazePath
}

type MazePath {
    points: [[Int!]!]!
    maze: Maze!
    user: User!
    isMazeCompleted: Boolean!
    completionDate: DateTime
}

type User {
    id: Int!
    nickname: String!
    profilePictureUrl: String
    registrationDate: DateTime

    # Fields available only to the user himself
    role: String
}

type GeneratorResult {
    maze: Maze
    errorCode: Int
    errorDescription: String
}

